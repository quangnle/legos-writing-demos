// --- C√†i ƒë·∫∑t Game ---
const boardSize = 11;
const diamondCount = 20; // T·ªïng s·ªë kim c∆∞∆°ng (ph·∫£i l√† s·ªë ch·∫µn)
let cellSize = 35; // K√≠ch th∆∞·ªõc √¥, s·∫Ω ƒë∆∞·ª£c t√≠nh to√°n

let players = {};
let diamonds = [];
let currentPlayerId;
let humanPlayerId = 1;
let aiPlayerId = 2;
let gameOver = false;
let winner = null; // null: ch∆∞a c√≥, 1: ng∆∞·ªùi ch∆°i 1, 2: ng∆∞·ªùi ch∆°i 2, 3: h√≤a
let message = "";

// --- C√†i ƒë·∫∑t AI (Minimax) ---
let aiThinking = false;
const minimaxDepth = 12; // ƒê·ªô s√¢u t√¨m ki·∫øm (tƒÉng ƒë·ªÉ AI m·∫°nh h∆°n, nh∆∞ng ch·∫≠m h∆°n)

function setup() {
    // T√≠nh to√°n k√≠ch th∆∞·ªõc canvas v√† √¥
    let canvas = createCanvas(cellSize * boardSize + 1, cellSize * boardSize + 1 + 25); // +1 ƒë·ªÉ v·∫Ω ƒë∆∞·ªùng vi·ªÅn cu·ªëi
    canvas.parent('canvas-container'); // G·∫Øn canvas v√†o ph·∫ßn t·ª≠ c√≥ id 'canvas-holder'
    initializeGame();
    updateMessage();
}

function draw() {
    background(245);
    drawGrid();
    drawDiamonds();
    drawPlayers();
    displayInfo();

    if (gameOver) {
        displayGameOver();
    } else if (currentPlayerId === aiPlayerId && !aiThinking) {
        // Trigger AI move
        aiThinking = true;
        // D√πng setTimeout ƒë·ªÉ tr√°nh block lu·ªìng v·∫Ω v√† cho ng∆∞·ªùi d√πng th·∫•y l∆∞·ª£t ƒëi tr∆∞·ªõc khi AI t√≠nh to√°n
        setTimeout(triggerAIMove, 100); // Delay nh·ªè
    }
}

function keyPressed() {
    if (!gameOver && currentPlayerId === humanPlayerId && !aiThinking) {
        handleHumanInput();
    }
}

// --- Kh·ªüi t·∫°o Game ---

function initializeGame() {
    // Ng∆∞·ªùi ch∆°i
    players = {
        1: { id: 1, x: 0, y: 0, score: 0, color: color(0, 0, 255) }, // Blue
        2: { id: 2, x: boardSize - 1, y: boardSize - 1, score: 0, color: color(255, 0, 0) } // Red (AI)
    };

    // Kim c∆∞∆°ng (ƒë·ªëi x·ª©ng qua t√¢m)
    generateSymmetricDiamonds();

    // Tr·∫°ng th√°i game
    currentPlayerId = humanPlayerId; // Ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu
    gameOver = false;
    winner = null;
    aiThinking = false;
    updateMessage();
}

function generateSymmetricDiamonds() {
    diamonds = [];
    let center = (boardSize - 1) / 2;
    let occupied = new Set();
    occupied.add(`${players[1].x},${players[1].y}`); // V·ªã tr√≠ ng∆∞·ªùi ch∆°i 1
    occupied.add(`${players[2].x},${players[2].y}`); // V·ªã tr√≠ ng∆∞·ªùi ch∆°i 2

    if (boardSize % 2 !== 0) {
        occupied.add(`${center},${center}`); // T√¢m b√†n c·ªù l·∫ª kh√¥ng th·ªÉ c√≥ kim c∆∞∆°ng ƒë·ªëi x·ª©ng
    }

    while (diamonds.length < diamondCount) {
        let x = floor(random(boardSize));
        let y = floor(random(boardSize));
        let symX = boardSize - 1 - x;
        let symY = boardSize - 1 - y;

        let posStr = `${x},${y}`;
        let symPosStr = `${symX},${symY}`;

        // ƒê·∫£m b·∫£o kh√¥ng tr√πng v·ªã tr√≠ ng∆∞·ªùi ch∆°i, t√¢m, v√† kim c∆∞∆°ng ƒë√£ c√≥
        // ƒê·∫£m b·∫£o kh√¥ng ƒë·∫∑t kim c∆∞∆°ng l√™n ch√≠nh n√≥ (x,y) == (symX, symY) -> t√¢m
        if (!occupied.has(posStr) && !occupied.has(symPosStr) && posStr !== symPosStr) {
            let diamondPos = { x: x, y: y };
            let symDiamondPos = { x: symX, y: symY };

            diamonds.push(diamondPos);
            diamonds.push(symDiamondPos);
            occupied.add(posStr);
            occupied.add(symPosStr);
        }
    }
    // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng ch√≠nh x√°c n·∫øu c√≥ l·ªói logic (hi·∫øm khi)
    if (diamonds.length > diamondCount) {
         diamonds = diamonds.slice(0, diamondCount);
    }
}


// Ph·∫ßn v·∫Ω v·ªùi

function drawGrid() {
    stroke(200);
    strokeWeight(1);
    for (let i = 0; i <= boardSize; i++) {
        line(i * cellSize, 0, i * cellSize, cellSize * boardSize);
        line(0, i * cellSize, cellSize * boardSize, i * cellSize);
    }
}

function drawDiamonds() {
    fill(0, 255, 0); // Green
    noStroke();
    let diamondSize = cellSize * 0.5;
    for (let diamond of diamonds) {
        // H√¨nh thoi ƒë∆°n gi·∫£n
        let centerX = diamond.x * cellSize + cellSize / 2;
        let centerY = diamond.y * cellSize + cellSize / 2;
        quad(centerX, centerY - diamondSize / 2, // Top point
             centerX + diamondSize / 2, centerY, // Right point
             centerX, centerY + diamondSize / 2, // Bottom point
             centerX - diamondSize / 2, centerY); // Left point
    }
}

function drawPlayers() {
    noStroke();
    textSize(cellSize * 0.6);
    textAlign(CENTER, CENTER);
    for (let id in players) {
        let p = players[id];        
        if (id == humanPlayerId) {
            text("üôÇ", p.x * cellSize + cellSize / 2, p.y * cellSize + cellSize / 2);
        } else {
            text("ü§ñ", p.x * cellSize + cellSize / 2, p.y * cellSize + cellSize / 2);
        }
    }
}

function displayInfo() {
    let bot = cellSize * boardSize + 1;
    fill(0);
    textSize(12);
    textAlign(LEFT, TOP);
    text(`üôÇ: ${players[1].score}`, 10, bot + 8);
    text(`ü§ñ: ${players[2].score}`, cellSize * boardSize - 40, bot + 8);
}

function displayGameOver() {
    fill(0, 0, 0, 180); // Semi-transparent black background
    rect(0, height / 2 - 50, width, 100);

    fill(255);
    textSize(32);
    textAlign(CENTER, CENTER);
    let winText = "";
    if (winner === 3) {
        winText = "H√≤a!";
    } else if (winner === humanPlayerId) {
        winText = "HUMAN Th·∫Øng!";
    } else if (winner === aiPlayerId) {
        winText = "AI Th·∫Øng!";
    }
    text(winText, width / 2, height / 2 - 10);
    textSize(16);
    text("Nh·∫•n F5 ƒë·ªÉ ch∆°i l·∫°i", width / 2, height / 2 + 20);
}

// --- X·ª≠ l√Ω Logic Game ---

function handleHumanInput() {
    let p = players[humanPlayerId];
    let nx = p.x;
    let ny = p.y;

    if (keyCode === UP_ARROW) ny--;
    else if (keyCode === DOWN_ARROW) ny++;
    else if (keyCode === LEFT_ARROW) nx--;
    else if (keyCode === RIGHT_ARROW) nx++;
    else return; // Kh√¥ng ph·∫£i ph√≠m di chuy·ªÉn

    if (isValidMove(nx, ny)) {
        makeMove(humanPlayerId, nx, ny);
    }
}

function isValidMove(x, y) {
    return x >= 0 && x < boardSize && y >= 0 && y < boardSize;
}

function makeMove(playerId, nx, ny) {
    if (gameOver) return;

    let player = players[playerId];
    let opponentId = (playerId === 1) ? 2 : 1;
    let opponent = players[opponentId];

    // 1. Ki·ªÉm tra ƒÉn ƒë·ªëi ph∆∞∆°ng
    if (nx === opponent.x && ny === opponent.y) {
        player.x = nx;
        player.y = ny;
        gameOver = true;
        winner = playerId;
        updateMessage();
        return;
    }

    // 2. Di chuy·ªÉn
    player.x = nx;
    player.y = ny;

    // 3. Ki·ªÉm tra ƒÉn kim c∆∞∆°ng
    let foundDiamondIndex = -1;
    for (let i = 0; i < diamonds.length; i++) {
        if (diamonds[i].x === nx && diamonds[i].y === ny) {
            foundDiamondIndex = i;
            break;
        }
    }

    if (foundDiamondIndex !== -1) {
        player.score++;
        diamonds.splice(foundDiamondIndex, 1); // X√≥a kim c∆∞∆°ng
    }

    // 4. Ki·ªÉm tra h·∫øt kim c∆∞∆°ng -> T√≠nh ƒëi·ªÉm th·∫Øng
    if (diamonds.length === 0) {
        gameOver = true;
        if (players[1].score > players[2].score) {
            winner = 1;
        } else if (players[2].score > players[1].score) {
            winner = 2;
        } else {
            winner = 3; // H√≤a
        }
        updateMessage();
        return;
    }

    // 5. Chuy·ªÉn l∆∞·ª£t
    currentPlayerId = opponentId;
    updateMessage();
}

function updateMessage() {
    if (gameOver) {
         if (winner === 3) message = "Tr√≤ ch∆°i k·∫øt th√∫c - H√≤a!";
         else message = `Tr√≤ ch∆°i k·∫øt th√∫c - Ng∆∞·ªùi ch∆°i ${winner} th·∫Øng!`;
    } else {
        message = `L∆∞·ª£t c·ªßa: Player ${currentPlayerId} ${currentPlayerId === aiPlayerId ? 'AI' : 'HUMAN'}`;
    }
}


// --- AI Logic (Minimax) ---

// H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi AI c·∫ßn th·ª±c hi·ªán n∆∞·ªõc ƒëi 
// ch·ªß y·∫øu l√† ƒë·ªÉ debugging v√† theo d√µi qu√° tr√¨nh AI suy nghƒ©
// C√≥ th·ªÉ b·ªè qua n·∫øu kh√¥ng c·∫ßn thi·∫øt
function triggerAIMove() {
    console.log("AI thinking...");
    let bestMove = findBestMove();
    if (bestMove) {
        console.log("AI moves to:", bestMove);
        makeMove(aiPlayerId, bestMove.x, bestMove.y);
    } else {
        console.warn("AI cannot find a valid move!");
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p AI kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá (v√≠ d·ª•: b·ªã ch·∫∑n ho√†n to√†n)
        // C√≥ th·ªÉ cho qua l∆∞·ª£t ho·∫∑c x·ª≠ l√Ω kh√°c t√πy lu·∫≠t ch∆°i mong mu·ªën
        currentPlayerId = humanPlayerId; // Cho ng∆∞·ªùi ch∆°i ƒëi l·∫°i
    }
    aiThinking = false;
     updateMessage(); // C·∫≠p nh·∫≠t l·∫°i th√¥ng b√°o sau khi AI ƒëi
}

function findBestMove() {
    let bestScore = -Infinity;
    let bestMove = null;
    let currentState = getCurrentGameState(); // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i
    let possibleMoves = getValidMovesForPlayer(aiPlayerId, currentState);

    console.log(`AI evaluating ${possibleMoves.length} moves...`);

    for (let move of possibleMoves) {
        // Quan tr·ªçng: T·∫°o tr·∫°ng th√°i m·ªõi t·ª´ n∆∞·ªõc ƒëi th·ª≠ nghi·ªám
        let nextState = simulateMove(currentState, aiPlayerId, move.x, move.y);
        // G·ªçi minimax cho l∆∞·ª£t c·ªßa ƒë·ªëi th·ªß (false = minimizing player)
        let score = minimax(nextState, minimaxDepth -1, -Infinity, Infinity, false); // B·∫Øt ƒë·∫ßu ƒë·ªô s√¢u m·ªõi
        console.log(`  Move (${move.x},${move.y}) evaluated score: ${score}`);

        if (score > bestScore) {
            bestScore = score;
            bestMove = move;
        }
        // C√≥ th·ªÉ th√™m random nh·ªè ƒë·ªÉ AI kh√¥ng ƒëi gi·ªëng h·ªát nhau n·∫øu nhi·ªÅu n∆∞·ªõc ƒëi c√πng ƒëi·ªÉm
        else if (score === bestScore && random() > 0.5) {
             bestMove = move;
        }

    }
    console.log(`Best score found: ${bestScore}`);
    return bestMove;
}

// Minimax v·ªõi Alpha-Beta Pruning
function minimax(state, depth, alpha, beta, isMaximizingPlayer) {
    // ƒêi·ªÅu ki·ªán d·ª´ng: h·∫øt ƒë·ªô s√¢u ho·∫∑c game k·∫øt th√∫c trong tr·∫°ng th√°i m√¥ ph·ªèng
    if (depth === 0 || state.gameOver) {
        return evaluateStateWithGameOverCheck(state, aiPlayerId); // ƒê√°nh gi√° t·ª´ g√≥c nh√¨n AI
    }

    let playerToMoveId = state.currentPlayer;
    let possibleMoves = getValidMovesForPlayer(playerToMoveId, state);

     // X·ª≠ l√Ω n·∫øu kh√¥ng c√≥ n∆∞·ªõc ƒëi n√†o h·ª£p l·ªá trong tr·∫°ng th√°i m√¥ ph·ªèng
     if (possibleMoves.length === 0) {
         return evaluateStateWithGameOverCheck(state, aiPlayerId);
     }


    if (isMaximizingPlayer) { // L∆∞·ª£t AI trong m√¥ ph·ªèng (mu·ªën t·ªëi ƒëa ƒëi·ªÉm)
        let maxEval = -Infinity;
        for (let move of possibleMoves) {
            let nextState = simulateMove(state, playerToMoveId, move.x, move.y);
            let eval = minimax(nextState, depth - 1, alpha, beta, false); // L∆∞·ª£t ƒë·ªëi th·ªß
            maxEval = max(maxEval, eval);
            alpha = max(alpha, eval); // C·∫≠p nh·∫≠t alpha
            if (beta <= alpha) {
                break; // C·∫Øt t·ªâa Beta
            }
        }
        return maxEval;
    } else { // L∆∞·ª£t ƒë·ªëi th·ªß trong m√¥ ph·ªèng (mu·ªën t·ªëi thi·ªÉu ƒëi·ªÉm c·ªßa AI)
        let minEval = Infinity;
        for (let move of possibleMoves) {
            let nextState = simulateMove(state, playerToMoveId, move.x, move.y);
            let eval = minimax(nextState, depth - 1, alpha, beta, true); // L∆∞·ª£t AI
            minEval = min(minEval, eval);
            beta = min(beta, eval); // C·∫≠p nh·∫≠t beta
            if (beta <= alpha) {
                break; // C·∫Øt t·ªâa Alpha
            }
        }
        return minEval;
    }
}

// --- H√†m Heuristic v√† c√°c h√†m h·ªó tr·ª£ AI ---

// H√†m ƒë√°nh gi√° tr·∫°ng th√°i cu·ªëi c√πng ho·∫∑c t·∫°i gi·ªõi h·∫°n ƒë·ªô s√¢u
// perspectivePlayerId: ID c·ªßa ng∆∞·ªùi ch∆°i m√† ta ƒëang ƒë√°nh gi√° (th∆∞·ªùng l√† AI)
// H√†m n√†y s·∫Ω tr·∫£ v·ªÅ gi√° tr·ªã ƒë√°nh gi√° cho tr·∫°ng th√°i hi·ªán t·∫°i
// B·∫°n c√≥ th·ªÉ download code v·ªÅ v√† customize h√†m n√†y theo √Ω mu·ªën
// ƒê·ªÉ AI ho·∫°t ƒë·ªông t·ªët h∆°n, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c thu·∫≠t to√°n heuristic kh√°c nhau
function evaluateStateWithGameOverCheck(state, perspectivePlayerId) {
    if (state.gameOver) {
        if (state.winner === perspectivePlayerId) return 10000000; // Th·∫Øng tuy·ªát ƒë·ªëi
        if (state.winner === null || state.winner === 3) return 0;   // H√≤a
        return -10000000; // Thua tuy·ªát ƒë·ªëi
    }
    // N·∫øu game ch∆∞a k·∫øt th√∫c, d√πng h√†m heuristic
    return heuristic(state, perspectivePlayerId);
}


// H√†m Heuristic theo y√™u c·∫ßu
// perspectivePlayerId: ID c·ªßa ng∆∞·ªùi ch∆°i m√† ta ƒëang ƒë√°nh gi√° (th∆∞·ªùng l√† AI)
function heuristic(state, perspectivePlayerId) {
    const aiPlayer = state.players[perspectivePlayerId];
    const opponentId = (perspectivePlayerId === 1) ? 2 : 1;
    const opponent = state.players[opponentId];
    const n = boardSize; // 11

    // Lu·∫≠t 1: Ki·ªÉm tra n·∫øu c√≥ th·ªÉ ƒÉn ƒë·ªëi ph∆∞∆°ng ngay l·∫≠p t·ª©c (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi ƒëi·ªÉm game over)
    // Lu·∫≠t 2: Ki·ªÉm tra n·∫øu ƒëang ƒë·ª©ng c·∫°nh ƒë·ªëi ph∆∞∆°ng
    let distOpponent = abs(aiPlayer.x - opponent.x) + abs(aiPlayer.y - opponent.y);
    if (distOpponent === 1) {
        return -1000000; // ƒêi·ªÉm ph·∫°t r·∫•t l·ªõn khi ƒë·ª©ng c·∫°nh ƒë·ªëi th·ªß (theo y√™u c·∫ßu)
    }

    // Lu·∫≠t 3: T√≠nh ƒëi·ªÉm theo c√¥ng th·ª©c s = (2n - d) + cs^2
    let currentScore = aiPlayer.score; // cs l√† ƒëi·ªÉm s·ªë ƒë·∫°t ƒë∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i hi·ªán t·∫°i (AI)
    let nearestDiamondDist = Infinity;

    if (state.diamonds.length > 0) {
        let minDist = Infinity;
        for (let diamond of state.diamonds) {
            let d = abs(aiPlayer.x - diamond.x) + abs(aiPlayer.y - diamond.y);
            minDist = min(minDist, d);
        }
         // N·∫øu ƒë·ª©ng ngay tr√™n v·ªã tr√≠ kim c∆∞∆°ng (d=0), coi nh∆∞ kho·∫£ng c√°ch l√† 1 ƒë·ªÉ tr√°nh l·ªói t√≠nh to√°n ho·∫∑c gi√° tr·ªã qu√° l·ªõn
        nearestDiamondDist = (minDist === 0) ? 1 : minDist;
    } else {
        // N·∫øu h·∫øt kim c∆∞∆°ng, th√†nh ph·∫ßn kho·∫£ng c√°ch kh√¥ng c√≤n √Ω nghƒ©a nhi·ªÅu.
        // ƒê·∫∑t d = 2n ƒë·ªÉ (2n - d) = 0.
        nearestDiamondDist = 2 * n;
    }

    // C√¥ng th·ª©c: s = (2n - d) + cs^2
    let heuristicValue = (2 * n - nearestDiamondDist) + (currentScore * currentScore);

    // C√¢n nh·∫Øc th√™m: C√≥ th·ªÉ c·ªông th√™m ƒëi·ªÉm ch√™nh l·ªách ƒë·ªÉ AI ∆∞u ti√™n d·∫´n ƒëi·ªÉm
    // heuristicValue += (aiPlayer.score - opponent.score) * weight; // V√≠ d·ª•: weight = 10

    return heuristicValue;
}

// L·∫•y c√°c n∆∞·ªõc ƒëi h·ª£p l·ªá cho m·ªôt ng∆∞·ªùi ch∆°i t·ª´ m·ªôt tr·∫°ng th√°i nh·∫•t ƒë·ªãnh
function getValidMovesForPlayer(playerId, state) {
    let player = state.players[playerId];
    // let opponent = state.players[(playerId === 1) ? 2 : 1]; // Kh√¥ng c·∫ßn opponent ·ªü ƒë√¢y
    let moves = [];
    let dx = [0, 0, 1, -1]; // Ph·∫£i, Tr√°i, Xu·ªëng, L√™n
    let dy = [1, -1, 0, 0]; // Ph·∫£i, Tr√°i, Xu·ªëng, L√™n (t∆∞∆°ng ·ª©ng y tƒÉng/gi·∫£m)

    for (let i = 0; i < 4; i++) {
        let nx = player.x + dx[i];
        let ny = player.y + dy[i];

        if (isValidMove(nx, ny)) {
             // Kh√¥ng c·∫ßn ki·ªÉm tra va ch·∫°m ƒë·ªëi th·ªß ·ªü ƒë√¢y, simulateMove s·∫Ω x·ª≠ l√Ω
            moves.push({ x: nx, y: ny });
        }
    }
    return moves;
}

// T·∫°o m·ªôt b·∫£n sao s√¢u c·ªßa tr·∫°ng th√°i game ƒë·ªÉ m√¥ ph·ªèng
function getCurrentGameState() {
    // JSON parse/stringify l√† c√°ch ƒë∆°n gi·∫£n ƒë·ªÉ deep copy object kh√¥ng ch·ª©a function, Date, etc.
    return JSON.parse(JSON.stringify({
        players: players,
        diamonds: diamonds,
        currentPlayer: currentPlayerId,
        gameOver: gameOver,
        winner: winner
    }));
}

// M√¥ ph·ªèng m·ªôt n∆∞·ªõc ƒëi v√† tr·∫£ v·ªÅ tr·∫°ng th√°i M·ªöI (kh√¥ng thay ƒë·ªïi tr·∫°ng th√°i g·ªëc)
function simulateMove(currentState, playerId, nx, ny) {
    // T·∫°o b·∫£n sao s√¢u c·ªßa tr·∫°ng th√°i hi·ªán t·∫°i
    let newState = JSON.parse(JSON.stringify(currentState));
    let player = newState.players[playerId];
    let opponentId = (playerId === 1) ? 2 : 1;
    let opponent = newState.players[opponentId];

    // 1. Ki·ªÉm tra ƒÉn ƒë·ªëi ph∆∞∆°ng
    if (nx === opponent.x && ny === opponent.y) {
        player.x = nx;
        player.y = ny;
        newState.gameOver = true;
        newState.winner = playerId;
        // Kh√¥ng c·∫ßn ƒë·ªïi l∆∞·ª£t v√¨ game k·∫øt th√∫c
        return newState;
    }

    // 2. Di chuy·ªÉn
    player.x = nx;
    player.y = ny;

    // 3. Ki·ªÉm tra ƒÉn kim c∆∞∆°ng
    let foundDiamondIndex = newState.diamonds.findIndex(d => d.x === nx && d.y === ny);
    if (foundDiamondIndex !== -1) {
        player.score++;
        newState.diamonds.splice(foundDiamondIndex, 1); // X√≥a kim c∆∞∆°ng kh·ªèi tr·∫°ng th√°i m·ªõi
    }

    // 4. Ki·ªÉm tra h·∫øt kim c∆∞∆°ng -> T√≠nh ƒëi·ªÉm th·∫Øng
    if (newState.diamonds.length === 0) {
        newState.gameOver = true;
        if (newState.players[1].score > newState.players[2].score) {
            newState.winner = 1;
        } else if (newState.players[2].score > newState.players[1].score) {
            newState.winner = 2;
        } else {
            newState.winner = 3; // H√≤a
        }
        // Kh√¥ng c·∫ßn ƒë·ªïi l∆∞·ª£t v√¨ game k·∫øt th√∫c
        return newState;
    }

    // 5. Chuy·ªÉn l∆∞·ª£t cho tr·∫°ng th√°i ti·∫øp theo
    newState.currentPlayer = opponentId;

    return newState; // Tr·∫£ v·ªÅ tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau n∆∞·ªõc ƒëi
}