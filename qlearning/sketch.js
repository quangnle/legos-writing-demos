let lander;
let gravity = 0.05;
let wind = 0;
let groundY;
// --- Tr·∫°ng th√°i Game ---
const STATE_RUNNING = 'RUNNING';
const STATE_SUCCESS = 'SUCCESS';
const STATE_CRASHED_GROUND = 'CRASHED_GROUND'; // R∆°i ch·∫°m ƒë·∫•t (ngo√†i v√πng/qu√° t·ªëc ƒë·ªô)
const STATE_CRASHED_OOB = 'CRASHED_OOB'; // R∆°i ra ngo√†i bi√™n
let gameState = STATE_RUNNING;
// ---------------------
let landingZone;
let qTable = {};
let actions = ["NONE", "UP", "LEFT", "RIGHT"];
let epsilon = 0.1; // T·ª∑ l·ªá kh√°m ph√°
let alpha = 0.1;   // T·ªëc ƒë·ªô h·ªçc
let gamma = 0.95;  // H·ªá s·ªë chi·∫øt kh·∫•u ph·∫ßn th∆∞·ªüng t∆∞∆°ng lai

// Bi·∫øn l∆∞u tr·ªØ cho Q-learning update
let currentState;
let previousState;
let previousAction;
let nWidthParts = 6; // S·ªë ph·∫ßn chia chi·ªÅu r·ªông
let nHeightParts = 6; // S·ªë ph·∫ßn chia chi·ªÅu cao

// Bi·∫øn theo d√µi v√† hi·ªÉn th·ªã
let frameCounter = 0; // ƒê·∫øm frame trong 1 episode ƒë·ªÉ reset
let episodeReward = 0;
let rewardHistory = [];
let maxHistory = 150;
let episodeCounter = 0; // ƒê·ªïi t√™n counter th√†nh episodeCounter cho r√µ nghƒ©a
let successCounter = 0;
let failCounter = 0;
let safeVy = 2.5; // T·ªëc ƒë·ªô r∆°i an to√†n 
let safeVx = 1.5; // T·ªëc ƒë·ªô ngang an to√†n 
let maxWindVariation = 0.0003;
let timer = 0; // ƒê·∫øm frame t·ªïng th·ªÉ (c√≥ th·ªÉ d√πng ƒë·ªÉ ph·∫°t th·ªùi gian)
let debugMode = false; // Ch·∫ø ƒë·ªô debug

function setup() {
    createCanvas(600, 400);
    groundY = height - 40;
    landingZone = { x: width / 2 - 100, w: 200 };
    resetEpisode();
}

function resetEpisode() {
    // L∆∞u tr·ªØ k·∫øt qu·∫£ c·ªßa l·∫ßn tr∆∞·ªõc (n·∫øu c√≥)
    if (episodeCounter > 0) { // Ch·ªâ l∆∞u khi ƒë√£ ch·∫°y √≠t nh·∫•t 1 episode
         if (rewardHistory.length > maxHistory) rewardHistory.shift();
         // T√≠nh t·ª∑ l·ªá th√†nh c√¥ng th·ª±c t·∫ø
         let successRate = (successCounter + failCounter > 0) ? successCounter / (successCounter + failCounter) : 0;
         rewardHistory.push(successRate);
         console.log(`Episode ${episodeCounter} ended. Reward: ${episodeReward.toFixed(2)}. Success Rate: ${successRate.toFixed(2)}.`);
    }

    // Kh·ªüi t·∫°o l·∫°i c√°c bi·∫øn cho m·ªôt l·∫ßn t·∫≠p m·ªõi
    lander = new Lander();
    gameState = STATE_RUNNING; // Reset tr·∫°ng th√°i game
    frameCounter = 0;
    previousState = null;
    previousAction = null;
    episodeReward = 0;
    episodeCounter++; // TƒÉng b·ªô ƒë·∫øm episode
    timer = 0;        // Reset b·ªô ƒë·∫øm th·ªùi gian/frame c·ªßa episode
    wind = 0;         // Reset gi√≥
}

function draw() {
    background(30);
    strokeWeight(0.5);
    drawGround();
    drawLandingZone();
    drawRewardGraph();
    displayStatus(); // Hi·ªÉn th·ªã tr·∫°ng th√°i (d√πng gameState)
    if (debugMode) {
        drawScenePartitions(nWidthParts, nHeightParts); // V·∫Ω c√°c ƒë∆∞·ªùng ph√¢n chia scene
    }

    // C·∫≠p nh·∫≠t v√† v·∫Ω lander (lu√¥n v·∫Ω tr·ª´ khi b·ªã OOB)
    if (gameState !== STATE_CRASHED_OOB) {
         lander.draw();
    } else {
         // C√≥ th·ªÉ v·∫Ω bi·ªÉu t∆∞·ª£ng n·ªï ·ªü v·ªã tr√≠ cu·ªëi c√πng n·∫øu mu·ªën
    }

    // X·ª≠ l√Ω logic ch√≠nh c·ªßa game v√† AI
    if (gameState === STATE_RUNNING) {
        // --- Chu k·ª≥ Q-Learning ---
        // 1. L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i (s)
        currentState = getState();

        // 2. Ch·ªçn h√†nh ƒë·ªông (a)
        let actionIndex = chooseAction(currentState);
        // L∆∞u tr·∫°ng th√°i v√† h√†nh ƒë·ªông *tr∆∞·ªõc khi* th·ª±c hi·ªán ƒë·ªÉ update Q-table sau
        let stateBeforeAction = currentState;
        let actionTaken = actionIndex;

        // 3. Th·ª±c hi·ªán h√†nh ƒë·ªông & c·∫≠p nh·∫≠t m√¥i tr∆∞·ªùng
        applyAction(actionIndex);
        lander.applyGravity();
        // T·∫°o v√† √°p d·ª•ng gi√≥ ng·∫´u nhi√™n
        let windVariation = random(-maxWindVariation, maxWindVariation);
        wind += windVariation;
        wind = constrain(wind, -0.03, 0.03);
        lander.applyWind(wind);
        lander.update(); // C·∫≠p nh·∫≠t v·ªã tr√≠ v·∫≠t l√Ω

        // 4. Quan s√°t tr·∫°ng th√°i m·ªõi (s') v√† ph·∫ßn th∆∞·ªüng (r)
        let nextState = getState(); // Tr·∫°ng th√°i sau khi h√†nh ƒë·ªông v√† v·∫≠t l√Ω ƒë∆∞·ª£c √°p d·ª•ng
        let terminalStateReached = lander.checkStatus(); // Ki·ªÉm tra xem c√≥ r∆°i v√†o tr·∫°ng th√°i k·∫øt th√∫c kh√¥ng
        let reward = getReward(terminalStateReached); // T√≠nh ph·∫ßn th∆∞·ªüng cho vi·ªác chuy·ªÉn ƒë·∫øn tr·∫°ng th√°i m·ªõi

        // 5. C·∫≠p nh·∫≠t Q-Table
        updateQTable(stateBeforeAction, actionTaken, reward, nextState, terminalStateReached !== STATE_RUNNING);

        // C·∫≠p nh·∫≠t t·ªïng ph·∫ßn th∆∞·ªüng episode
        episodeReward += reward;

        // Chuy·ªÉn sang tr·∫°ng th√°i m·ªõi (c√≥ th·ªÉ l√† terminal)
        gameState = terminalStateReached;

        // TƒÉng b·ªô ƒë·∫øm th·ªùi gian/frame
        timer++;

    } else {
        // --- X·ª≠ l√Ω khi Episode k·∫øt th√∫c ---
        lander.stop(); // D·ª´ng chuy·ªÉn ƒë·ªông c·ªßa t√†u

        // V·∫Ω hi·ªáu ·ª©ng n·∫øu r∆°i
        if (gameState === STATE_CRASHED_GROUND || gameState === STATE_CRASHED_OOB) {
            fill(255, 0, 0);
            textSize(35);
            textAlign(CENTER, CENTER);
            text("üí•", lander.x, lander.y);
        }

        // TƒÉng frameCounter ƒë·ªÉ ƒë·∫øm th·ªùi gian tr∆∞·ªõc khi reset
        frameCounter++;
        if (frameCounter > 120) { // Reset sau 2 gi√¢y (120 frames / 60 fps)
            resetEpisode();
        }
    }
}

function keyPressed() {
    if (key === ' ') { // Nh·∫•n 'D' ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô debug
        debugMode = !debugMode; // Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô debug
    }
}

// --- V·∫Ω v·ªùi ---
function drawGround() {
    fill(80, 200, 100);
    rect(0, groundY, width, height - groundY);
}

function drawLandingZone() {
    fill(100, 100, 255);
    rect(landingZone.x, groundY, landingZone.w, 10); // L√†m v√πng ƒë√°p m·ªèng h∆°n ch√∫t
}

function drawScenePartitions(nWidthParts, nHeightParts) {
    stroke(50, 50, 50, 100); // M√†u x√°m nh·∫°t
    // v·∫Ω c√°c ƒë∆∞·ªùng ph√¢n chia scene
    for (let i = 0; i < nWidthParts; i++) {
        line(i * (width / nWidthParts), 0, i * (width / nWidthParts), height);
    }
    for (let j = 0; j < nHeightParts; j++) {
        line(0, j * (height / nHeightParts), width, j * (height / nHeightParts));
    }    

    // t√≠nh xem t√†u v≈© tr·ª• ƒëang ·ªü ph·∫ßn n√†o
    // ti·∫øp t·ª•c t√≠nh to√°n xem vy v√† vx n·∫±m trong kho·∫£ng n√†o t·ª´ -1,0,1 theo c√°ch r·ªùi r·∫°c h√≥a b√™n tr√™n
    // v·∫Ω h√¨nh ch·ªØ nh·∫≠t cho ph·∫ßn ƒë√≥ v·ªõi m√†u t√≠nh b·∫±ng c√°ch grayscale = abs(vx) + abs(vy)
    let partWidth = width / nWidthParts;
    let partHeight = height / nHeightParts;
    let partX = Math.floor(lander.x / partWidth);
    let partY = Math.floor(lander.y / partHeight);
    
    let vx = lander.vx > safeVx ? 1 : (lander.vx < -safeVx ? -1 : 0); // 1 n·∫øu l·ªõn h∆°n safeVx, -1 n·∫øu nh·ªè h∆°n -safeVx, 0 n·∫øu n·∫±m trong kho·∫£ng [-safeVx, safeVx]
    let vy = lander.vy > safeVy ? 1 : (lander.vy < -safeVy ? -1 : 0); // 1 n·∫øu l·ªõn h∆°n safeVy, -1 n·∫øu nh·ªè h∆°n -safeVy, 0 n·∫øu n·∫±m trong kho·∫£ng [-safeVy, safeVy]    
    let unsafeRate  = abs(vx) + abs(vy);    // T√≠nh t·ª∑ l·ªá kh√¥ng an to√†n (0-2)
    
    if (unsafeRate === 0) {
        fill(100, 255, 100, 100); // M√†u x√°m nh·∫°t h∆°n cho ph·∫ßn kh√¥ng an to√†n
    } else if (unsafeRate === 1) {
        fill(255, 255, 100, 100); // M√†u v√†ng nh·∫°t cho ph·∫ßn kh√¥ng an to√†n
    }
    else {
        fill(255, 100, 100, 100); // M√†u ƒë·ªè nh·∫°t cho ph·∫ßn kh√¥ng an to√†n
    }

    rect(partX * partWidth, partY * partHeight, partWidth, partHeight); // V·∫Ω h√¨nh ch·ªØ nh·∫≠t cho ph·∫ßn ƒë√≥

    // v·∫Ω gi√° tr·ªã trong Q-table cho ph·∫ßn ƒë√≥
    // n·∫±m ·ªü 4 g√≥c t∆∞∆°ng ·ª©ng v·ªõi 4 h√†nh ƒë·ªông
    // n·∫øu c√≥ gi√° tr·ªã trong Q-table cho ph·∫ßn ƒë√≥ th√¨ v·∫Ω
    // n·∫øu kh√¥ng c√≥ th√¨ v·∫Ω m√†u x√°m nh·∫°t
    let qValues = qTable[`${partX},${partY},${vx},${vy}`]; // L·∫•y Q-values cho ph·∫ßn ƒë√≥
    if (qValues) {
        // v·∫Ω 4 gi√° tr·ªã Q-table cho 4 h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng: l√™n (0), tr√°i (1), ph·∫£i (2), kh√¥ng l√†m g√¨ (3)
        
        // t√¨m max Q-value trong 4 h√†nh ƒë·ªông
        let maxQ = Math.max(...qValues);
        let maxQIndex = qValues.indexOf(maxQ); // t√¨m ch·ªâ s·ªë h√†nh ƒë·ªông c√≥ Q-value l·ªõn nh·∫•t

        // v·ªã tr√≠ ƒë·ªÉ v·∫Ω tr√™n, d∆∞·ªõi, tr√°i, ph·∫£i
        let topPos = {x: partX * partWidth + partWidth / 2, y: partY * partHeight + partHeight / 4};
        let leftPos = {x: partX * partWidth + partWidth / 4, y: partY * partHeight + partHeight / 2};
        let rightPos = {x: partX * partWidth + partWidth * 3 / 4, y: partY * partHeight + partHeight / 2};
        let downPos = {x: partX * partWidth + partWidth / 2, y: partY * partHeight + partHeight * 3 / 4};

        fill(100, 255, 100, 200); // M√†u xanh l√°
        // v·∫Ω m·ªôt h√¨nh tr√≤n nh·ªè ƒë·ªÉ bi·ªÉu th·ªã cho gi√° tr·ªã Q l·ªõn nh·∫•t t·∫°i v·ªã tr√≠ t∆∞∆°ng ·ª©ng
        if (maxQIndex === 0) { // H√†nh ƒë·ªông "UP"
            ellipse(topPos.x, topPos.y, 10); // V·∫Ω h√¨nh tr√≤n cho h√†nh ƒë·ªông "UP"
        } else if (maxQIndex === 1) { // H√†nh ƒë·ªông "LEFT"
            ellipse(leftPos.x, leftPos.y, 10); // V·∫Ω h√¨nh tr√≤n cho h√†nh ƒë·ªông "LEFT"
        } else if (maxQIndex === 2) { // H√†nh ƒë·ªông "RIGHT"
            ellipse(rightPos.x, rightPos.y, 10); // V·∫Ω h√¨nh tr√≤n cho h√†nh ƒë·ªông "RIGHT"
        } else { // H√†nh ƒë·ªông "NONE"
            ellipse(downPos.x, downPos.y, 10); // V·∫Ω h√¨nh tr√≤n cho h√†nh ƒë·ªông "NONE"
        }
              
    }
    else {
        fill(200, 200, 200, 100); // M√†u x√°m nh·∫°t n·∫øu kh√¥ng c√≥ gi√° tr·ªã Q
        rect(partX * partWidth, partY * partHeight, partWidth / 2, partHeight / 2); // V·∫Ω h√¨nh ch·ªØ nh·∫≠t cho ph·∫ßn ƒë√≥
    }    

}

function drawRewardGraph() {
    let graphX = 10,
        graphY = 100,
        graphW = maxHistory, // Chi·ªÅu r·ªông b·∫±ng s·ªë l∆∞·ª£ng l·ªãch s·ª≠ t·ªëi ƒëa
        graphH = 50;

    // V·∫Ω khung
    noFill();
    stroke(255);
    rect(graphX, graphY, graphW, graphH);

    // V·∫Ω ƒë∆∞·ªùng ƒë·ªì th·ªã t·ª∑ l·ªá th√†nh c√¥ng
    noFill();
    beginShape();
    stroke(100, 255, 100); // M√†u xanh l√°
    for (let i = 0; i < rewardHistory.length; i++) {
        // Map index sang t·ªça ƒë·ªô x, map t·ª∑ l·ªá (0-1) sang t·ªça ƒë·ªô y
        let x = map(i, 0, rewardHistory.length -1 , graphX, graphX + graphW); // ƒëi·ªÅu ch·ªânh map ƒë·ªÉ v·∫Ω h·∫øt chi·ªÅu r·ªông
        let y = map(rewardHistory[i], 0, 1, graphY + graphH, graphY); // T·ª∑ l·ªá t·ª´ 0 ƒë·∫øn 1
        vertex(x, y);
    }
    endShape();

    // Hi·ªÉn th·ªã text th√¥ng tin
    fill(255);
    textSize(9);
    textAlign(LEFT, BOTTOM); // Canh ch·ªânh text
    text(`Episode: ${episodeCounter}`, graphX, graphY - 22);
    text(`Success Rate (Avg): ${rewardHistory.length > 0 ? (rewardHistory.reduce((a, b) => a + b, 0) / rewardHistory.length).toFixed(2) : 'N/A'}`, graphX, graphY - 12);
    text(`Success/Fail: ${successCounter}/${failCounter}`, graphX, graphY-2); // ƒê·∫∑t b√™n ph·∫£i ƒë·ªì th·ªã

}

function displayStatus() {
    fill(255);
    strokeWeight(0.5);
    textSize(9); 
    textAlign(LEFT, TOP);
    let statusText = "";
    switch (gameState) {
        case STATE_RUNNING:
            statusText = "üöÄ Q-Learning Pilot Active...";
            break;
        case STATE_SUCCESS:
            statusText = "‚úÖ Landed Successfully!";
            break;
        case STATE_CRASHED_GROUND:
            statusText = "üí• Crashed on Ground!";
            break;
        case STATE_CRASHED_OOB:
            statusText = "üí• Crashed - Out of Bounds!";
            break;
    }
    text(statusText, 10, 10);
    text(`Velocity: vx=${lander.vx.toFixed(2)}, vy=${lander.vy.toFixed(2)}`, 10, 31);
    text(`Position: x=${lander.x.toFixed(1)}, y=${lander.y.toFixed(1)}`, 10, 43);
    text(`Wind: ${wind.toFixed(4)}`, 10, 55);
}